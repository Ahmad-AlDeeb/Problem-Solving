class Dsu {
	vector<int> ccSize, parent;
	int treesCount;

	void link(int smallParent, int bigParent) {
		if (ccSize[smallParent] > ccSize[bigParent])
			swap(smallParent, bigParent);

		parent[smallParent] = bigParent;
        ccSize[bigParent] += ccSize[smallParent];
	}

    public:
        Dsu(int n) {
            ccSize = vector<int>(n), parent = vector<int>(n);
            treesCount = n;	

            for (int i = 0; i < n; ++i) {
                parent[i] = i;
                ccSize[i] = 1;
            }
        }

        int findParent(int node) {
            if (node == parent[node])
                return node;
            return parent[node] = findParent(parent[node]);
        }

        bool unionTrees(int node1, int node2) {
            int parent1 = findParent(node1);
            int parent2 = findParent(node2);
            
            if (parent1 != parent2) {	// Different components
                link(parent1, parent2);
                treesCount--;	// 2 merged into 1
            }
            return parent1 != parent2;
	    }

        int getCcSize(int node) {
            return ccSize[findParent(node)];
        }
};

class Solution {
    Dsu kruskal(vector<vector<int>>& graph, int n) { 
        Dsu dsu(n);

        for(int i{}; i < n; ++i)
            for(int j{i + 1}; j < n; ++j)
                if(graph[i][j])
                    dsu.unionTrees(i, j);
        
        return dsu;
    }

public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        Dsu dsu = kruskal(graph, n);
        sort(initial.begin(), initial.end());
        
        vector<int> ccInfectedCount(n);
        for(auto node : initial)
            ccInfectedCount[dsu.findParent(node)]++;
        
        int target = initial[0];
        int maxInfected {-1};
        
        for(auto node : initial) {
            int ccParent = dsu.findParent(node);
            int ccSize = dsu.getCcSize(node);

            if(ccInfectedCount[ccParent] == 1 && ccSize > maxInfected) {
                maxInfected = ccSize;
                target = node;
            }
        }
        return target;
    }
};
